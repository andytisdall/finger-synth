{"version":3,"sources":["toneGenerator.js","Controls.js","Keyboard.js","App.js","reportWebVitals.js","index.js"],"names":["filter","Tone","toDestination","distortion","connect","synth","player","play","frequency","mod","triggerAttack","value","changeFreq","changeMod","stop","triggerRelease","Controls","props","className","onInput","e","setKey","target","selectedKey","setStartingOctave","startingOctave","setOctaves","octaves","Keyboard","useState","key","frequencyScale","scaleLog","domain","range","floor","getFreqRange","modScale","getFreq","position","parseInt","getMod","invert","onTouchStart","changedTouches","clientX","freq","clientY","onTouchMove","onTouchEnd","onTouchCancel","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4e3e3f3b.chunk.js","sourcesContent":["import * as Tone from 'tone';\n\n\nconst filter = new Tone.Filter(15000, 'lowpass').toDestination();\nconst distortion = new Tone.Distortion().connect(filter)\nconst synth = new Tone.Synth().connect(distortion);\n\nconst player = {\n\n    play: (frequency, mod) => {\n\n        synth.triggerAttack();\n        filter.frequency.value = mod * 150;\n        synth.frequency.value = frequency;\n    },\n\n    changeFreq: (frequency) => {\n        synth.frequency.value = frequency;\n    },\n\n    changeMod: (value) => {\n       filter.frequency.value = value * 150;\n    },\n\n    stop: () => {\n        synth.triggerRelease()\n    }\n\n};\n\n\nexport default player;","import React from 'react';\n\nconst Controls = props => {\n\n    return (\n        <div className=\"margin\">\n            <div className=\"controls\">\n\n                <div className=\"note-selector\">\n                    Key:\n                    <select\n                        onInput={e => props.setKey(e.target.value)}\n                        value={props.selectedKey}  \n                    >\n                        <option value={32.7}>C</option>\n                        <option value={34.65}>C#</option>\n                        <option value={36.71}>D</option>\n                        <option value={38.89}>D#</option>\n                        <option value={41.20}>E</option>\n                        <option value={43.65}>F</option>\n                        <option value={46.25}>F#</option>\n                        <option value={49}>G</option>\n                        <option value={51.91}>G#</option>\n                        <option value={55}>A</option>\n                        <option value={58.27}>A#</option>\n                        <option value={61.74}>B</option>\n                    </select>\n                </div>\n\n                <div className=\"note-selector\">\n                    Starting Octave:\n                    <select\n                        onInput={e => props.setStartingOctave(e.target.value)}\n                        value={props.startingOctave}\n                    >\n                        <option value={1}>1</option>\n                        <option value={2}>2</option>\n                        <option value={3}>3</option>\n                        <option value={4}>4</option>\n                        <option value={5}>5</option>\n                        <option value={6}>6</option>\n                        <option value={7}>7</option>\n                    </select>\n                </div>\n\n                <div className=\"note-selector\">\n                    Octaves:\n                    <select\n                        onInput={e => props.setOctaves(e.target.value)}\n                        value={props.octaves}\n                    >\n                        <option value={1}>1</option>\n                        <option value={2}>2</option>\n                        <option value={3}>3</option>\n                        <option value={4}>4</option>\n                        <option value={5}>5</option>\n                        <option value={6}>6</option>\n                        <option value={7}>7</option>\n                        <option value={8}>8</option>\n                        <option value={9}>9</option>\n                        <option value={10}>10</option>\n                        <option value={11}>11</option>\n                        <option value={12}>12</option>\n                    </select>\n                </div>\n\n            </div>\n        </div>\n    );\n\n};\n\nexport default Controls;","import React, { useState } from 'react';\nimport { scaleLog } from 'd3';\n\nimport './Keyboard.css';\nimport player from './toneGenerator';\nimport Controls from './Controls';\n\nconst Keyboard = (props) => {\n\n    const [key, setKey] = useState(32.7);\n    const [startingOctave, setStartingOctave] = useState(3);\n    const [octaves, setOctaves] = useState(3);\n\n    const getFreqRange = () => {\n        const floor = key * startingOctave;\n        const ceiling = floor * octaves * 2;\n\n        return [floor, ceiling];\n    }\n\n    const frequencyScale = scaleLog()\n        .domain([800, 30])\n        .range(getFreqRange());\n\n    const modScale = scaleLog()\n        .domain([1, 100])\n        .range([1, 365]);\n\n    const getFreq = position => {\n        return frequencyScale(parseInt(position));\n    };\n\n    const getMod = position => {\n        return modScale.invert(position);\n    }\n\n    const touchStart = e => {\n\n        const mod = getMod(e.changedTouches[0].clientX);\n        const freq = getFreq(e.changedTouches[0].clientY);\n        player.play(freq, mod);\n\n    }\n\n    const touchMove = e => {\n        const freq = getFreq(e.changedTouches[0].clientY);\n        const mod = getMod(e.changedTouches[0].clientX);\n        player.changeMod(mod);\n        player.changeFreq(freq);\n\n    }\n\n    return (\n        <div className='container'>\n            <Controls\n                selectedKey = {key}\n                setKey = {setKey}\n                octaves = {octaves}\n                setOctaves = {setOctaves}\n                startingOctave = {startingOctave}\n                setStartingOctave = {setStartingOctave}\n            />\n            <div\n                className='keyboard'\n                onTouchStart={touchStart}\n                onTouchMove={touchMove}\n                onTouchEnd={player.stop}\n                onTouchCancel={player.stop}\n            >\n\n            </div>\n            <div className='margin'/>\n        </div>\n    );\n};\n\nexport default Keyboard;","\nimport './App.css';\nimport Keyboard from './Keyboard';\n\nfunction App() {\n  return (\n    <Keyboard />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}