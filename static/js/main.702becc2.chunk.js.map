{"version":3,"sources":["toneGenerator.js","Controls.js","Keyboard.js","App.js","reportWebVitals.js","index.js"],"names":["toneGenerator","this","filter","Tone","toDestination","distortion","connect","synth","console","log","frequency","mod","triggerAttack","value","triggerRelease","Controls","props","className","onInput","e","setKey","target","selectedKey","setStartingOctave","startingOctave","setOctaves","octaves","Keyboard","useState","player","setPlayer","key","frequencyScale","scaleLog","domain","range","floor","getFreqRange","modScale","getFreq","position","parseInt","getMod","invert","touchStart","a","changedTouches","clientX","freq","clientY","play","touchMove","changeMod","changeFreq","touchEnd","stop","startAudioContext","onTouchStart","onTouchMove","onTouchEnd","onTouchCancel","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.702becc2.chunk.js","sourcesContent":["import * as Tone from 'tone';\n\nclass toneGenerator {\n\n    constructor() {\n\n        this.filter = new Tone.Filter(20000, 'lowpass').toDestination();\n        this.distortion = new Tone.Distortion().connect(this.filter)\n        this.synth = new Tone.Synth().connect(this.distortion);\n        console.log('player created')\n\n    }\n\n    play(frequency, mod) {\n\n        this.synth.triggerAttack();\n        this.filter.frequency.value = mod * 150;\n        this.synth.frequency.value = frequency;\n    }\n\n    changeFreq(frequency) {\n        this.synth.frequency.value = frequency;\n    }\n\n    changeMod(value) {\n        this.filter.frequency.value = value * 150;\n    }\n\n    stop() {\n        this.synth.triggerRelease()\n    }\n\n}\n\n\nexport default toneGenerator;","import React from 'react';\n\nconst Controls = props => {\n\n    return (\n        <div className=\"margin\">\n            <div className=\"controls\">\n\n                <div className=\"note-selector\">\n                    Key \n                    <select\n                        onInput={e => props.setKey(e.target.value)}\n                        value={props.selectedKey}  \n                    >\n                        <option value={32.7}>C</option>\n                        <option value={34.65}>C#</option>\n                        <option value={36.71}>D</option>\n                        <option value={38.89}>D#</option>\n                        <option value={41.20}>E</option>\n                        <option value={43.65}>F</option>\n                        <option value={46.25}>F#</option>\n                        <option value={49}>G</option>\n                        <option value={51.91}>G#</option>\n                        <option value={55}>A</option>\n                        <option value={58.27}>A#</option>\n                        <option value={61.74}>B</option>\n                    </select>\n                </div>\n\n                <div className=\"note-selector\">\n                    Starting Octave\n                    <select\n                        onInput={e => props.setStartingOctave(e.target.value)}\n                        value={props.startingOctave}\n                    >\n                        <option value={1}>1</option>\n                        <option value={2}>2</option>\n                        <option value={3}>3</option>\n                        <option value={4}>4</option>\n                        <option value={5}>5</option>\n                        <option value={6}>6</option>\n                        <option value={7}>7</option>\n                    </select>\n                </div>\n\n                <div className=\"note-selector\">\n                    Octaves\n                    <select\n                        onInput={e => props.setOctaves(e.target.value)}\n                        value={props.octaves}\n                    >\n                        <option value={1}>1</option>\n                        <option value={2}>2</option>\n                        <option value={3}>3</option>\n                        <option value={4}>4</option>\n                        <option value={5}>5</option>\n                        <option value={6}>6</option>\n                        <option value={7}>7</option>\n                        <option value={8}>8</option>\n                        <option value={9}>9</option>\n                        <option value={10}>10</option>\n                        <option value={11}>11</option>\n                        <option value={12}>12</option>\n                    </select>\n                </div>\n\n            </div>\n        </div>\n    );\n\n};\n\nexport default Controls;","import React, { useState } from 'react';\nimport { scaleLog } from 'd3';\nimport * as Tone from 'tone';\n\nimport './Keyboard.css';\nimport toneGenerator from './toneGenerator';\nimport Controls from './Controls';\n\nconst Keyboard = (props) => {\n\n    const [player, setPlayer] = useState(null);\n\n    const [key, setKey] = useState(32.7);\n    const [startingOctave, setStartingOctave] = useState(3);\n    const [octaves, setOctaves] = useState(3);\n\n    const getFreqRange = () => {\n        const floor = key * startingOctave;\n        const ceiling = floor * octaves * 2;\n\n        return [floor, ceiling];\n    };\n\n    const frequencyScale = scaleLog()\n        .domain([800, 30])\n        .range(getFreqRange());\n\n    const modScale = scaleLog()\n        .domain([1, 100])\n        .range([1, 365]);\n\n    const getFreq = position => {\n        return frequencyScale(parseInt(position));\n    };\n\n    const getMod = position => {\n        return modScale.invert(position);\n    };\n\n    const touchStart = async (e) => {\n\n        const mod = getMod(e.changedTouches[0].clientX);\n        const freq = getFreq(e.changedTouches[0].clientY);\n        player.play(freq, mod);\n\n    };\n\n    const touchMove = e => {\n        const freq = getFreq(e.changedTouches[0].clientY);\n        const mod = getMod(e.changedTouches[0].clientX);\n        player.changeMod(mod);\n        player.changeFreq(freq);\n\n    };\n\n    const touchEnd = () => {\n        player.stop();\n    }\n\n    const startAudioContext = async () => {\n        await Tone.start();\n        setPlayer(new toneGenerator());\n    };\n    \n\n    const showKeyboard = () => {\n        if (!player) {\n            return (\n                <div\n                    className='keyboard'\n                    onTouchStart={startAudioContext}\n                >\n                    <div className=\"start\">\n                        Press to Start\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <div\n                className='keyboard'\n                onTouchStart={touchStart}\n                onTouchMove={touchMove}\n                onTouchEnd={touchEnd}\n                onTouchCancel={touchEnd}\n            />\n        );\n    };\n\n    return (\n        <div className='container'>\n            <Controls\n                selectedKey = {key}\n                setKey = {setKey}\n                octaves = {octaves}\n                setOctaves = {setOctaves}\n                startingOctave = {startingOctave}\n                setStartingOctave = {setStartingOctave}\n            />\n\n            {showKeyboard()}\n\n            <div className='margin'/>\n        </div>\n    );\n};\n\nexport default Keyboard;","\nimport './App.css';\nimport Keyboard from './Keyboard';\n\nfunction App() {\n  return (\n    <Keyboard />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}